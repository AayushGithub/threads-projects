{"version":3,"sources":["../../src/swc/options.ts"],"sourcesContent":["import commander from \"commander\";\nimport { DEFAULT_EXTENSIONS, version as swcCoreVersion } from \"@swc/core\";\nimport type { Options } from \"@swc/core\";\n\nconst pkg = require(\"../../package.json\");\n\nlet program: commander.Command;\n\nexport const initProgram = () => {\n  program = new commander.Command();\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV === \"test\") {\n    program.exitOverride();\n  }\n\n  program.option(\n    \"-f, --filename [filename]\",\n    \"filename to use when reading from stdin - this will be used in source-maps, errors etc\"\n  );\n\n  program.option(\"--config-file [path]\", \"Path to a .swcrc file to use\");\n\n  program.option(\n    \"--env-name [name]\",\n    \"The name of the 'env' to use when loading configs and plugins. \" +\n      \"Defaults to the value of SWC_ENV, or else NODE_ENV, or else 'development'.\"\n  );\n\n  program.option(\"--no-swcrc\", \"Whether or not to look up .swcrc files\");\n\n  program.option(\n    \"--delete-dir-on-start\",\n    \"Whether or not delete output directory on start\"\n  );\n\n  program.option(\n    \"--ignore [list]\",\n    \"list of glob paths to **not** compile\",\n    collect\n  );\n\n  program.option(\n    \"--only [list]\",\n    \"list of glob paths to **only** compile\",\n    collect\n  );\n\n  program.option(\"-w, --watch\", \"Recompile files on changes\");\n\n  program.option(\"-q, --quiet\", \"Suppress compilation output\");\n\n  program.option(\n    \"-s, --source-maps [true|false|inline|both]\",\n    \"generate source maps\",\n    unstringify\n  );\n\n  program.option(\n    \"--source-map-target [string]\",\n    \"set `file` on returned source map\"\n  );\n\n  program.option(\n    \"--source-file-name [string]\",\n    \"set `sources[0]` on returned source map\"\n  );\n\n  program.option(\n    \"--source-root [filename]\",\n    \"the root from which all sources are relative\"\n  );\n\n  program.option(\n    \"-o, --out-file [out]\",\n    \"Compile all input files into a single file\"\n  );\n\n  program.option(\n    \"-d, --out-dir [out]\",\n    \"Compile an input directory of modules into an output directory\"\n  );\n\n  program.option(\n    \"-D, --copy-files\",\n    \"When compiling a directory copy over non-compilable files\"\n  );\n  program.option(\n    \"--include-dotfiles\",\n    \"Include dotfiles when compiling and copying non-compilable files\"\n  );\n\n  program.option(\n    \"-C, --config <config>\",\n    \"Override a config from .swcrc file. e.g. -C module.type=amd -C module.moduleId=hello\",\n    collect\n  );\n\n  program.option(\n    \"--sync\",\n    \"Invoke swc synchronously. Useful for debugging.\",\n    collect\n  );\n\n  program.option(\n    \"--log-watch-compilation\",\n    \"Log a message when a watched file is successfully compiled\",\n    true\n  );\n\n  program.option(\"--extensions [list]\", \"Use specific extensions\", collect);\n\n  program.version(`\n@swc/cli: ${pkg.version}\n@swc/core: ${swcCoreVersion}\n`);\n\n  program.usage(\"[options] <files ...>\");\n  program.addHelpText(\n    \"beforeAll\",\n    `\n============================================================================================\nBeta version of @swc/cli is now available via 'swcx' command.\nThis'll be a default command for @swc/cli@1.\nPlease give it a try and report any issues at https://github.com/swc-project/swc/issues/4017\n============================================================================================\n\n`\n  );\n};\n\nfunction unstringify(val: string): any {\n  try {\n    return JSON.parse(val);\n  } catch {\n    return val;\n  }\n}\n\nfunction collect(\n  value: string,\n  previousValue?: string[]\n): string[] | undefined {\n  // If the user passed the option with no value, like \"babel file.js --presets\", do nothing.\n  /* istanbul ignore next */\n  if (typeof value !== \"string\") return previousValue;\n\n  const values = value.split(\",\");\n\n  return previousValue ? previousValue.concat(values) : values;\n}\n\nexport interface CliOptions {\n  readonly outDir: string;\n  readonly outFile: string;\n  /**\n   * Invoke swc using transformSync. It's useful for debugging.\n   */\n  readonly sync: boolean;\n  readonly sourceMapTarget?: string;\n  readonly filename: string;\n  readonly filenames: string[];\n  readonly extensions: string[];\n  readonly watch: boolean;\n  readonly copyFiles: boolean;\n  readonly includeDotfiles: boolean;\n  readonly deleteDirOnStart: boolean;\n  readonly quiet: boolean;\n}\n\nexport default function parserArgs(args: string[]) {\n  program.parse(args);\n  const opts = program.opts();\n\n  const filenames = program.args;\n  const errors = [];\n\n  if (opts.outDir && !filenames.length) {\n    errors.push(\"--out-dir requires filenames\");\n  }\n\n  if (opts.outFile && opts.outDir) {\n    errors.push(\"--out-file and --out-dir cannot be used together\");\n  }\n\n  if (opts.watch) {\n    if (!opts.outFile && !opts.outDir) {\n      errors.push(\"--watch requires --out-file or --out-dir\");\n    }\n\n    if (!filenames.length) {\n      errors.push(\"--watch requires filenames\");\n    }\n  }\n\n  if (\n    !opts.outDir &&\n    filenames.length === 0 &&\n    typeof opts.filename !== \"string\" &&\n    opts.swcrc !== false\n  ) {\n    errors.push(\n      \"stdin compilation requires either -f/--filename [filename] or --no-swcrc\"\n    );\n  }\n\n  if (errors.length) {\n    console.error(\"swc:\");\n    for (const error of errors) {\n      console.error(\"  \" + error);\n    }\n    process.exit(2);\n  }\n\n  const swcOptions: Options = {\n    jsc: {\n      parser: undefined,\n      transform: {},\n    },\n    sourceFileName: opts.sourceFileName,\n    sourceRoot: opts.sourceRoot,\n    configFile: opts.configFile,\n    swcrc: opts.swcrc,\n  };\n\n  if (opts.sourceMaps !== undefined) {\n    swcOptions.sourceMaps = opts.sourceMaps;\n  }\n\n  if (opts.config) {\n    for (const cfg of opts.config as string[]) {\n      const i = cfg.indexOf(\"=\");\n      let key: string;\n      let value: any;\n      if (i === -1) {\n        key = cfg;\n        value = true;\n      } else {\n        key = cfg.substring(0, i);\n        value = unstringify(cfg.substring(i + 1));\n      }\n      // https://github.com/swc-project/cli/issues/45\n      let options = swcOptions as { [key: string]: any };\n      const keyParts = key.split(\".\");\n      const lastIndex = keyParts.length - 1;\n      for (const [index, keyPart] of keyParts.entries()) {\n        if (options[keyPart] === undefined && index !== lastIndex) {\n          options[keyPart] = {};\n        }\n        if (index === lastIndex) {\n          options[keyPart] = value;\n        } else {\n          options = options[keyPart];\n        }\n      }\n    }\n  }\n\n  const cliOptions: CliOptions = {\n    outDir: opts.outDir,\n    outFile: opts.outFile,\n    filename: opts.filename,\n    filenames,\n    sync: !!opts.sync,\n    sourceMapTarget: opts.sourceMapTarget,\n    extensions: opts.extensions || DEFAULT_EXTENSIONS,\n    watch: !!opts.watch,\n    copyFiles: !!opts.copyFiles,\n    includeDotfiles: !!opts.includeDotfiles,\n    deleteDirOnStart: Boolean(opts.deleteDirOnStart),\n    quiet: !!opts.quiet,\n  };\n  return {\n    swcOptions,\n    cliOptions,\n  };\n}\n"],"names":["initProgram","parserArgs","pkg","require","program","commander","Command","process","env","NODE_ENV","exitOverride","option","collect","unstringify","version","swcCoreVersion","usage","addHelpText","val","JSON","parse","value","previousValue","values","split","concat","args","opts","filenames","errors","outDir","length","push","outFile","watch","filename","swcrc","console","error","exit","swcOptions","jsc","parser","undefined","transform","sourceFileName","sourceRoot","configFile","sourceMaps","config","cfg","i","indexOf","key","substring","options","keyParts","lastIndex","index","keyPart","entries","cliOptions","sync","sourceMapTarget","extensions","DEFAULT_EXTENSIONS","copyFiles","includeDotfiles","deleteDirOnStart","Boolean","quiet"],"mappings":"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"}