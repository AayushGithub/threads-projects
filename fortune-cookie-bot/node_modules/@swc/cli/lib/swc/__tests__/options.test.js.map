{"version":3,"sources":["../../../src/swc/__tests__/options.test.ts"],"sourcesContent":["import type { Options } from \"@swc/core\";\nimport deepmerge from 'deepmerge'\n\nimport parserArgs, { CliOptions, initProgram } from \"../options\";\n\ninterface ParserArgsReturn {\n  swcOptions: Options;\n  cliOptions: CliOptions;\n}\n\nconst createDefaultResult = (): ParserArgsReturn => ({\n  \"cliOptions\": {\n    \"copyFiles\": false,\n    \"deleteDirOnStart\": false,\n    \"extensions\": [\".js\", \".jsx\", \".es6\", \".es\", \".mjs\", \".ts\", \".tsx\"],\n    // @ts-expect-error\n    \"filename\": undefined,\n    \"filenames\": [\"src\"],\n    \"includeDotfiles\": false,\n    // @ts-expect-error\n    \"outDir\": undefined,\n    // @ts-expect-error\n    \"outFile\": undefined,\n    \"quiet\": false,\n    \"sourceMapTarget\": undefined,\n    \"sync\": false,\n    \"watch\": false\n  },\n  \"swcOptions\": {\n    \"configFile\": undefined,\n    \"jsc\": { \"parser\": undefined, \"transform\": {} },\n    \"sourceFileName\": undefined,\n    \"sourceMaps\": undefined,\n    \"sourceRoot\": undefined,\n    \"swcrc\": true\n  }\n})\n\ndescribe('parserArgs', () => {\n  let defaultResult: ParserArgsReturn\n\n  beforeEach(() => {\n    defaultResult = createDefaultResult()\n    initProgram()\n  })\n\n  it(\"minimal args returns default result\", async () => {\n    const args = [\n      'node',\n      '/path/to/node_modules/swc-cli/bin/swc.js',\n      'src'\n    ]\n    const result = await parserArgs(args);\n    expect(result).toEqual(defaultResult);\n  });\n\n  describe('errors', () => {\n    let mockExit: jest.SpyInstance\n    let mockConsoleError: jest.SpyInstance\n\n    beforeAll(() => {\n      //@ts-expect-error\n      mockExit = jest.spyOn(process, 'exit').mockImplementation(() => { });\n      mockConsoleError = jest.spyOn(console, 'error').mockImplementation(() => { });\n    })\n\n    beforeEach(() => {\n      mockExit.mockClear()\n      mockConsoleError.mockClear()\n    })\n\n    afterAll(() => {\n      mockExit.mockRestore()\n      mockConsoleError.mockRestore()\n    })\n\n    it('exits without filenames', async () => {\n      const args = [\n        'node',\n        '/path/to/node_modules/swc-cli/bin/swc.js',\n      ]\n      await parserArgs(args);\n      expect(mockExit).toHaveBeenCalledWith(2);\n      expect(mockConsoleError).toHaveBeenCalledTimes(2);\n    })\n\n    it('--watch exits without --out-dir', async () => {\n      const args = [\n        'node',\n        '/path/to/node_modules/swc-cli/bin/swc.js',\n        'src',\n        '--watch',\n      ]\n      await parserArgs(args);\n      expect(mockExit).toHaveBeenCalledWith(2);\n      expect(mockConsoleError).toHaveBeenCalledTimes(2);\n    })\n\n    it('--watch exits without filenames', async () => {\n      const args = [\n        'node',\n        '/path/to/node_modules/swc-cli/bin/swc.js',\n        '--watch',\n        '--out-dir',\n        'esm'\n      ]\n      await parserArgs(args);\n      expect(mockExit).toHaveBeenCalledWith(2);\n      expect(mockConsoleError).toHaveBeenCalledTimes(3);\n    })\n\n    it('--out-dir exits with conflicting -out-file', async () => {\n      const args = [\n        'node',\n        '/path/to/node_modules/swc-cli/bin/swc.js',\n        'src',\n        '--out-file',\n        'esm/index.js',\n        '--out-dir',\n        'esm'\n      ]\n      await parserArgs(args);\n      expect(mockExit).toHaveBeenCalledWith(2);\n      expect(mockConsoleError).toHaveBeenCalledTimes(2);\n    })\n  })\n\n  describe('--source-maps', () => {\n    it(\"source maps is ambiguous\", async () => {\n      const args = [\n        'node',\n        '/path/to/node_modules/swc-cli/bin/swc.js',\n        'src',\n        '--source-maps'\n      ]\n      const result = await parserArgs(args);\n      const expectedOptions = deepmerge(defaultResult, { swcOptions: { sourceMaps: true } })\n      expect(result).toEqual(expectedOptions);\n    });\n\n    it(\"source maps true\", async () => {\n      const args = [\n        'node',\n        '/path/to/node_modules/swc-cli/bin/swc.js',\n        '--source-maps',\n        'true',\n        'src'\n      ]\n      const result = await parserArgs(args);\n      const expectedOptions = deepmerge(defaultResult, { swcOptions: { sourceMaps: true } })\n      expect(result).toEqual(expectedOptions);\n    });\n\n    it(\"source maps inline\", async () => {\n      const args = [\n        'node',\n        '/path/to/node_modules/swc-cli/bin/swc.js',\n        '-s',\n        'inline',\n        'src'\n      ]\n      const result = await parserArgs(args);\n      const expectedOptions = deepmerge(defaultResult, { swcOptions: { sourceMaps: 'inline' } })\n      expect(result).toEqual(expectedOptions);\n    });\n  });\n\n  describe('--config', () => {\n    it(\"throws with no config\", async () => {\n      const args = [\n        'node',\n        '/path/to/node_modules/swc-cli/bin/swc.js',\n        'src',\n        '-C',\n      ]\n      expect(() => parserArgs(args)).toThrow();\n    });\n\n    it(\"react development\", async () => {\n      const args = [\n        'node',\n        '/path/to/node_modules/swc-cli/bin/swc.js',\n        '--config',\n        'jsc.transform.react.development=true',\n        'src'\n      ]\n      const result = await parserArgs(args);\n      const expectedOptions = deepmerge(defaultResult.swcOptions, {\n        jsc: { transform: { react: { development: true } } }\n      })\n      expect(result.swcOptions).toEqual(expectedOptions);\n    });\n\n    it(\"react development and commonjs (two config options)\", async () => {\n      const args = [\n        'node',\n        '/path/to/node_modules/swc-cli/bin/swc.js',\n        '--config',\n        'jsc.transform.react.development=true',\n        '-C',\n        'module.type=commonjs',\n        'src'\n      ]\n      const result = await parserArgs(args);\n      const expectedOptions = deepmerge(defaultResult.swcOptions, {\n        jsc: { transform: { react: { development: true } } },\n        module: { type: 'commonjs' }\n      })\n      expect(result.swcOptions).toEqual(expectedOptions);\n    });\n\n    it(\"react development and commonjs (comma-separated)\", async () => {\n      const args = [\n        'node',\n        '/path/to/node_modules/swc-cli/bin/swc.js',\n        '--config',\n        'jsc.transform.react.development=true,module.type=commonjs',\n        'src'\n      ]\n      const result = await parserArgs(args);\n      const expectedOptions = deepmerge(defaultResult.swcOptions, {\n        jsc: { transform: { react: { development: true } } },\n        module: { type: 'commonjs' }\n      })\n      expect(result.swcOptions).toEqual(expectedOptions);\n    });\n\n    it(\"no equals sign\", async () => {\n      const args = [\n        'node',\n        '/path/to/node_modules/swc-cli/bin/swc.js',\n        '--config',\n        'no_equals',\n        'src'\n      ]\n      const result = await parserArgs(args);\n      const expectedOptions = deepmerge(defaultResult.swcOptions, {\n        no_equals: true\n      })\n      expect(result.swcOptions).toEqual(expectedOptions);\n    });\n  })\n})\n"],"names":["createDefaultResult","undefined","describe","defaultResult","beforeEach","initProgram","it","args","result","parserArgs","expect","toEqual","mockExit","mockConsoleError","beforeAll","jest","spyOn","process","mockImplementation","console","mockClear","afterAll","mockRestore","toHaveBeenCalledWith","toHaveBeenCalledTimes","expectedOptions","deepmerge","swcOptions","sourceMaps","toThrow","jsc","transform","react","development","module","type","no_equals"],"mappings":"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"}