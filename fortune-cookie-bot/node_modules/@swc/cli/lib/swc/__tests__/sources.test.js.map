{"version":3,"sources":["../../../src/swc/__tests__/sources.test.ts"],"sourcesContent":["import { globSources, splitCompilableAndCopyable } from \"../sources\";\nimport fs from \"fs\";\nimport glob from \"fast-glob\";\n\njest.mock(\"fs\");\njest.mock(\"fast-glob\");\n\ndescribe(\"globSources\", () => {\n  beforeEach(() => {\n    (fs as any).resetMockStats();\n  });\n\n  it(\"exclude dotfiles sources when includeDotfiles=false\", async () => {\n    const files = await globSources([\".dotfile\"], false);\n\n    expect([...files]).toEqual([]);\n  });\n\n  it(\"include dotfiles sources when includeDotfiles=true\", async () => {\n    (fs as any).setMockStats({ \".dotfile\": { isDirectory: () => false } });\n    const files = await globSources([\".dotfile\"], true);\n\n    expect([...files]).toEqual([\".dotfile\"]);\n  });\n\n  it(\"include multiple file sources\", async () => {\n    (fs as any).setMockStats({ \".dotfile\": { isDirectory: () => false } });\n    (fs as any).setMockStats({ file: { isDirectory: () => false } });\n    const files = await globSources([\".dotfile\", \"file\"], true);\n\n    expect([...files]).toEqual([\".dotfile\", \"file\"]);\n  });\n\n  it(\"exclude files that errors on stats\", async () => {\n    (fs as any).setMockStats({ \".dotfile\": { isDirectory: () => false } });\n    (fs as any).setMockStats({ file: new Error(\"Failed stat\") });\n    const files = await globSources([\".dotfile\", \"file\"], true);\n\n    expect([...files]).toEqual([\".dotfile\"]);\n  });\n\n  it(\"includes all files from directory\", async () => {\n    (fs as any).setMockStats({ directory: { isDirectory: () => true } });\n    (fs as any).setMockStats({ file: { isDirectory: () => false } });\n\n    (glob as unknown as jest.Mock).mockResolvedValue([\"fileDir1\", \"fileDir2\"]);\n    const files = await globSources([\"file\", \"directory\"], true);\n\n    expect([...files]).toEqual([\"file\", \"fileDir1\", \"fileDir2\"]);\n  });\n\n  it(\"exclude files from directory that fail to glob\", async () => {\n    (fs as any).setMockStats({ directory: { isDirectory: () => true } });\n    (fs as any).setMockStats({ file: { isDirectory: () => false } });\n\n    (glob as unknown as jest.Mock).mockRejectedValue(new Error(\"Failed\"));\n    const files = await globSources([\"file\", \"directory\"], true);\n\n    expect([...files]).toEqual([\"file\"]);\n  });\n});\n\ndescribe(\"splitCompilableAndCopyable\", () => {\n  const extensions = [\".ts\"];\n  it(\"separate compilable and copyable when copyFiles=true\", () => {\n    const files = [\"test.ts\", \"test.txt\"];\n    const [compilable, copyable] = splitCompilableAndCopyable(\n      files,\n      extensions,\n      true\n    );\n\n    expect(compilable).toEqual([\"test.ts\"]);\n    expect(copyable).toEqual([\"test.txt\"]);\n  });\n\n  it(\"separate compilable and copyable when copyFiles=false\", () => {\n    const files = [\"test.ts\", \"test.txt\"];\n    const [compilable, copyable] = splitCompilableAndCopyable(\n      files,\n      extensions,\n      false\n    );\n\n    expect(compilable).toEqual([\"test.ts\"]);\n    expect(copyable).toEqual([]);\n  });\n});\n"],"names":["jest","mock","describe","beforeEach","fs","resetMockStats","it","files","globSources","expect","toEqual","setMockStats","isDirectory","file","Error","directory","glob","mockResolvedValue","mockRejectedValue","extensions","compilable","copyable","splitCompilableAndCopyable"],"mappings":"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"}