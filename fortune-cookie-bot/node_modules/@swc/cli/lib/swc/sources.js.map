{"version":3,"sources":["../../src/swc/sources.ts"],"sourcesContent":["import glob from \"fast-glob\";\nimport slash from \"slash\";\nimport { stat } from \"fs\";\nimport { join, basename, extname } from \"path\";\n\n/**\n * Find all input files based on source globs\n */\nexport async function globSources(\n  sources: string[],\n  includeDotfiles = false\n): Promise<string[]> {\n  const globConfig = {\n    dot: includeDotfiles,\n    nodir: true,\n  };\n\n  const files = await Promise.all(\n    sources\n      .filter(source => includeDotfiles || !basename(source).startsWith(\".\"))\n      .map(source => {\n        return new Promise<string[]>(resolve => {\n          stat(source, (err, stat) => {\n            if (err) {\n              resolve([]);\n              return;\n            }\n            if (!stat.isDirectory()) {\n              resolve([source]);\n            } else {\n              glob(slash(join(source, \"**\")), globConfig)\n                .then(matches => resolve(matches))\n                .catch(() => resolve([]));\n            }\n          });\n        });\n      })\n  );\n\n  return Array.from(new Set<string>(files.flat()));\n}\n\ntype Split = [compilable: string[], copyable: string[]];\n\n/**\n * Test if a filename ends with a compilable extension.\n */\nexport function isCompilableExtension(\n  filename: string,\n  allowedExtension: string[]\n): boolean {\n  const ext = extname(filename);\n  return allowedExtension.includes(ext);\n}\n\n/**\n * Split file list to files that can be compiled and copied\n */\nexport function splitCompilableAndCopyable(\n  files: string[],\n  allowedExtension: string[],\n  copyFiles: boolean\n): Split {\n  const compilable: string[] = [];\n  const copyable: string[] = [];\n\n  for (const file of files) {\n    const isCompilable = isCompilableExtension(file, allowedExtension);\n\n    if (isCompilable) {\n      compilable.push(file);\n    } else if (copyFiles) {\n      copyable.push(file);\n    }\n  }\n\n  return [compilable, copyable];\n}\n\nexport async function requireChokidar() {\n  try {\n    const { default: chokidar } = await import(\"chokidar\");\n    return chokidar;\n  } catch (err) {\n    console.error(\n      \"The optional dependency chokidar is not installed and is required for \" +\n        \"--watch. Chokidar is likely not supported on your platform.\"\n    );\n    throw err;\n  }\n}\n\nexport async function watchSources(sources: string[], includeDotfiles = false) {\n  const chokidar = await requireChokidar();\n\n  return chokidar.watch(sources, {\n    ignored: includeDotfiles\n      ? undefined\n      : (filename: string) => basename(filename).startsWith(\".\"),\n    ignoreInitial: true,\n    awaitWriteFinish: {\n      stabilityThreshold: 50,\n      pollInterval: 10,\n    },\n  });\n}\n"],"names":["globSources","isCompilableExtension","splitCompilableAndCopyable","requireChokidar","watchSources","sources","includeDotfiles","globConfig","dot","nodir","files","Promise","all","filter","source","basename","startsWith","map","resolve","stat","err","isDirectory","glob","slash","join","then","matches","catch","Array","from","Set","flat","filename","allowedExtension","ext","extname","includes","copyFiles","compilable","copyable","file","isCompilable","push","default","chokidar","console","error","watch","ignored","undefined","ignoreInitial","awaitWriteFinish","stabilityThreshold","pollInterval"],"mappings":";;;;;;;;;;;IAQsBA,WAAW,MAAXA;IAuCNC,qBAAqB,MAArBA;IAWAC,0BAA0B,MAA1BA;IAqBMC,eAAe,MAAfA;IAaAC,YAAY,MAAZA;;+DA5FL;4DACC;oBACG;sBACmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKjC,eAAeJ,YACpBK,OAAiB,EACjBC,kBAAkB,KAAK,EACJ;IACnB,MAAMC,aAAa;QACjBC,KAAKF;QACLG,OAAO,IAAI;IACb;IAEA,MAAMC,QAAQ,MAAMC,QAAQC,GAAG,CAC7BP,QACGQ,MAAM,CAACC,CAAAA,SAAUR,mBAAmB,CAACS,IAAAA,cAAQ,EAACD,QAAQE,UAAU,CAAC,MACjEC,GAAG,CAACH,CAAAA,SAAU;QACb,OAAO,IAAIH,QAAkBO,CAAAA,UAAW;YACtCC,IAAAA,QAAI,EAACL,QAAQ,CAACM,KAAKD,OAAS;gBAC1B,IAAIC,KAAK;oBACPF,QAAQ,EAAE;oBACV;gBACF,CAAC;gBACD,IAAI,CAACC,KAAKE,WAAW,IAAI;oBACvBH,QAAQ;wBAACJ;qBAAO;gBAClB,OAAO;oBACLQ,IAAAA,iBAAI,EAACC,IAAAA,cAAK,EAACC,IAAAA,UAAI,EAACV,QAAQ,QAAQP,YAC7BkB,IAAI,CAACC,CAAAA,UAAWR,QAAQQ,UACxBC,KAAK,CAAC,IAAMT,QAAQ,EAAE;gBAC3B,CAAC;YACH;QACF;IACF;IAGJ,OAAOU,MAAMC,IAAI,CAAC,IAAIC,IAAYpB,MAAMqB,IAAI;AAC9C;AAOO,SAAS9B,sBACd+B,QAAgB,EAChBC,gBAA0B,EACjB;IACT,MAAMC,MAAMC,IAAAA,aAAO,EAACH;IACpB,OAAOC,iBAAiBG,QAAQ,CAACF;AACnC;AAKO,SAAShC,2BACdQ,KAAe,EACfuB,gBAA0B,EAC1BI,SAAkB,EACX;IACP,MAAMC,aAAuB,EAAE;IAC/B,MAAMC,WAAqB,EAAE;IAE7B,KAAK,MAAMC,QAAQ9B,MAAO;QACxB,MAAM+B,eAAexC,sBAAsBuC,MAAMP;QAEjD,IAAIQ,cAAc;YAChBH,WAAWI,IAAI,CAACF;QAClB,OAAO,IAAIH,WAAW;YACpBE,SAASG,IAAI,CAACF;QAChB,CAAC;IACH;IAEA,OAAO;QAACF;QAAYC;KAAS;AAC/B;AAEO,eAAepC,kBAAkB;IACtC,IAAI;QACF,MAAM,EAAEwC,SAASC,SAAQ,EAAE,GAAG,MAAM,iEAAA,QAAO;QAC3C,OAAOA;IACT,EAAE,OAAOxB,KAAK;QACZyB,QAAQC,KAAK,CACX,2EACE;QAEJ,MAAM1B,IAAI;IACZ;AACF;AAEO,eAAehB,aAAaC,OAAiB,EAAEC,kBAAkB,KAAK,EAAE;IAC7E,MAAMsC,WAAW,MAAMzC;IAEvB,OAAOyC,SAASG,KAAK,CAAC1C,SAAS;QAC7B2C,SAAS1C,kBACL2C,YACA,CAACjB,WAAqBjB,IAAAA,cAAQ,EAACiB,UAAUhB,UAAU,CAAC,IAAI;QAC5DkC,eAAe,IAAI;QACnBC,kBAAkB;YAChBC,oBAAoB;YACpBC,cAAc;QAChB;IACF;AACF"}